property surface_color: Color;
property surface_specular: Color;
property surface_shininess: f32;

program frag {
    vec4 ambient = global_ambient * surface_color;

    // Vertex normal in view space.
    vec3 n = normalize(@vertex.view_normal);

    // Direction from vertex to light in view space.
    vec3 l;

    // Direction from vertex to camera in view space.
    vec3 v = normalize(-@vertex.view_position.xyz);

    // Distance-based attenuation of the light. Doesn't apply for directional lights.
    float attenuation;

    // Handle calculation specific to the current light type.
    if (light_type == 0) {
        vec3 light_offset = (light_position_view - @vertex.view_position).xyz;
        float dist = length(light_offset);
        l = normalize(light_offset);
        attenuation = pow(clamp(1.0 - (dist / light_radius), 0, 1), 2.0);
    } else if (light_type == 1) {
        l = -light_direction;
        attenuation = 1;
    }

    // Calculate diffuse color.
    float l_dot_n = dot(l, n);
    vec4 diffuse =
        max(l_dot_n, 0) *
        surface_color *
        light_color *
        attenuation *
        light_strength;

    // Calculate specular color.
    // Specular defaults to black for
    vec4 specular = vec4(0.0, 0.0, 0.0, 1.0);
    if (l_dot_n > 0) {
        vec3 r = normalize(reflect(-l, n));
        float r_dot_v = clamp(dot(r, v), 0.0, 1.0);
        specular =
            surface_specular *
            pow(r_dot_v, surface_shininess) *
            attenuation *
            light_strength;
    }

    @color = ambient + diffuse + specular;
}
